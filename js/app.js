let map = null ;
let zoomNum = 6 ;
const minTF = document.getElementById("minTF") ;
const maxTF = document.getElementById("maxTF") ;
const titleString=['Election 2024','Unemployment','Median Property Tax','Percent Non-White','Population'] ;
const dataCol = ['per_dem', 'unemp_rate', 'real_estate_taxes_med_2022','percent_nonwhite','TOT_POP'];
const dataLabel = ['Fraction Dem','Percent Unemployed','Dollars','Percent','Population']
const scaleMult =[100.,1.,1.] ;
let electionFlag = true ;
let unempFlag = false ;
let citiesFlag = true ;
let dtype = dataCol[0] ;
let dtype_num = 0 ;
let townsObj =[] ;
let townDataFlag = 0 ;



let scalebarTitle = document.getElementById("scalebarTitle");

// Esri color ramps - Blue and Red 2
const colors=["#999999ff", "#ff0000ff", "#ffa500ff", "#cccc00ff", "#00bb00ff",
                "#00c8c8ff","#0000ffff", "#4b0082ff", "#ee82eeff","#ccccffff"] ;
const rbcolors = ["#ff1414ff", "#e61428FF", "#d21432FF", "#be1452ff", "#aa1468FF", 
    "#961478FF", "#821496FF", "#6614aaff","#2814e6ff", "#5214beff","#1414ffff"];
const scaleblocks = document.querySelectorAll('.scaleblock');

let rangeValues = [] ;
let minmax = [] ;
 
function setMinMax(){
    let dnum = dtype_num ;
    minmax=[Number(minTF.value),Number(maxTF.value)] ;
    getParams(election, dataCol[dnum], false);
    loadMap(minmax,dataCol[dnum], dnum) ;
    console.log("setting: ",minmax, dnum) ;
    loadScaleBlock (minmax,dnum) ;
}

function townsToggle (num) {
    townDataFlag = num ;
    loadMap(minmax, dtype,dtype_num);
    
    
}


function changeData(num){
    dtype = dataCol[num] ;
    minmax = getParams(election,dtype, true);
    
    loadMap(minmax,dtype, num) ;
    loadScaleBlock (minmax,num) ;
    dtype_num = num ;

}

function loadMap (minmax, dval, index){
    
    scalebarTitle.innerHTML = dataLabel[index];
    document.getElementById('maptitle').innerHTML = titleString[index] ;
    if (map != undefined) { map.remove(); } 
    map = L.map('mapid').setView([43.5,-73], zoomNum);
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: zoomNum+10,
    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);
    if (townDataFlag != 2){
    readTowns('data/towns.csv') ;
    }
    
    L.geoJSON(statesData,{
        style: {color: "#336633ff"}
    }).addTo(map) ;


    if (townDataFlag!=1){
    if (electionFlag){
    L.geoJSON(election, {

        
        style: function(feature) {
            let min = 1.E12 ;
            let max = -1.E12 ;
            
            
            let val = getColor (feature.properties[dval],minmax) ;
            
            return {color : val,fillColor: val,fillOpacity:"80%"} ;
            // if (feature.properties.per_dem < .5) {
            //     return {color: "#ff0000",fillColor: "#00ff00"};
            // }
            // return {color: "#0000ff"};
            
        }
    }).bindPopup(function (election) {
        return (election.feature.properties.NAME+"<br>"+
            (election.feature.properties[dval].toFixed(2))
        );
     }).addTo(map);

    }}


   
     

    
}


function loadScaleBlock (minmax,dnum) {
    let text = '' ;
    for (var iblock=1; iblock<11; iblock++){
        scaleblocks[iblock].style.backgroundColor=colors[iblock-1];
        console.log("in scaleblock") ;
        if (dnum != 4)
        {
        if (iblock==1){
            text = `<= ${rangeValues[1]}` ;
        }
        else {
            text = `${rangeValues[iblock-1]} - ${rangeValues[iblock]}`;
        }
        } else {
            if (iblock==1){
                let val = Math.round(rangeValues[1]);
                text = `<= ${val}` ;
            }
            else {
                let val = Math.round(rangeValues[iblock-1]);
                let val1 = Math.round(rangeValues[iblock]);
                text = `${val} - ${val1}`;
            }



        }
        console.log(text);
        scaleblocks[iblock].innerHTML = text ;
    }
}

function getColor (value,minmax){
    let indval = 0 ;
    let range = minmax[1]-minmax[0] ;
    let range10 = range / 10. ;

    let ival = (value - minmax[0]) / range10  ;
    if (ival < 0) ival = 0 ;
    if (ival > 9) ival = 9 ;
    ival = Math.round (ival) ;
    // console.log(ival+ "  :  "+colors[ival]);
    return colors[ival+1] ;
    }


// Generated by RampGenerator.com

// This function allows you to enter a value and have the color returned,
// useful when coloring geojson maps or anything else you can think of.

// sample usage:
// console.log(getColor(22.22));
// result: #CB1230

// function getColor(v) {
//     return v >= 100 ? '#1919A4' :
//       v >= 88.88 ? '#321893' :
//       v >= 77.77 ? '#4C1783' :
//       v >= 66.66 ? '#651672' :
//       v >= 55.55 ? '#7F1562' :
//       v >= 44.44 ? '#981451' :
//       v >= 33.33 ? '#B21341' :
//       v >= 22.22 ? '#CB1230' :
//       v >= 11.11 ? '#E51120' :
//       v >= 0 ? '#FF1010' :
//               '#FF1010'; 
//   }

function getParams (election,dval,calcMinMax) {
    if (calcMinMax){
        minval = 1.E9 ;
        maxval = -1.E9 ;
        console.log('hello');
        for (let ival = 0; ival< election.features.length; ival++){
            let val = election.features[ival].properties[dval] ;
            if (val>maxval) maxval = val ;
            if (val<minval) minval = val ;

        }
    }
    else {
        minval = minmax[0] ;
        maxval = minmax[1] ;
    }
    let nranges = 10 ;
    let xinc = (maxval - minval) / nranges ;
    for (let i=0; i<nranges; i++) {
        rangeValues [i] = (minval + i * xinc).toFixed(2) ;
    }
    minTF.value=(minval.toFixed(2)) ;
    maxTF.value=(maxval.toFixed(2)) ;
    return ([minval,maxval])
}


function readTowns (townFile) {
   
    $ajaxUtils.sendGetRequest (townFile, function(responseText ){
        
        let lines = responseText.split("\n") ;
        let firstline = lines[0].split(",") ;
        for (i=1; i<lines.length; i++){
            if (lines[i].length<5) break ;
            
            let thisline = lines[i].split(",");
            let town = { name:thisline[0] , lat:Number(thisline[1]), long:Number(thisline[2]), pop:thisline[3]};
            townsObj.push(town) ;
        }
        citiesFlag = true ;
        for (town of townsObj){
                let markerOptions = {
                    title: town.name ,
                    clickable: true ,
    
                };
                var marker = L.marker([town.lat,town.long],markerOptions).bindPopup(town.name+"<br>Population: "+town.pop).addTo(map) ;
                
    
        }
        
        
        
    }, false) ;


}





minmax = getParams(election,'per_dem', true);

loadMap(minmax,'per_dem', 0) ;
loadScaleBlock (minmax,0) ;

